<svg xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="400" height="100"><defs><symbol xmlns="http://www.w3.org/2000/svg" id="svg_1" viewBox="0 0 576 512">( function hookGeo() { //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>} )();<!--! Font Awesome Pro 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc.--><path d="m248.8,4.99c1.1,-3 4,-4.99 7.2,-4.99c3.2,0 6.1,1.99 7.2,4.99l14.1,37.68l37.7,14.12c3,1.13 5,4 5,7.21c0,3.21 -2,6.08 -5,7.21l-37.7,14.12l-14.1,37.67c-1.1,3 -4,5 -7.2,5c-3.2,0 -6.1,-2 -7.2,-5l-14.1,-37.67l-38.6,-14.12c-3,-1.13 -4.1,-4 -4.1,-7.21c0,-3.21 1.1,-6.08 4.1,-7.21l38.6,-14.12l14.1,-37.68zm178.6,9.07c18.8,-18.75 49.2,-18.75 67.9,0l34.6,34.58c18.7,18.74 18.7,49.14 0,67.86l-381.4,381.4c-18.7,18.7 -49.12,18.7 -67.86,0l-34.58,-34.6c-18.75,-18.7 -18.75,-49.1 0,-67.9l381.34,-381.34zm34,45.25l-105.1,104.99l23.3,23.3l105,-105.02l-23.2,-23.27zm-453.91,57.89l56.51,-21.2l21.19,-56.51c1.69,-4.51 6,-7.49 10.81,-7.49c4.8,0 9.1,2.98 10.8,7.49l21.2,56.51l56.5,21.2c4.5,1.7 7.5,6 7.5,10.8c0,4.8 -3,9.1 -7.5,10.8l-56.5,21.2l-21.2,56.5c-1.7,4.5 -6,7.5 -10.8,7.5c-4.81,0 -9.12,-3 -10.81,-7.5l-21.19,-56.5l-56.51,-21.2c-4.51,-1.7 -7.49,-6 -7.49,-10.8c0,-4.8 2.98,-9.1 7.49,-10.8zm352.01,256l56.5,-21.2l21.2,-56.5c1.7,-5.4 6,-7.5 10.8,-7.5c4.8,0 9.1,2.1 10.8,7.5l21.2,56.5l56.5,21.2c4.5,1.7 7.5,6 7.5,10.8c0,4.8 -3,9.1 -7.5,10.8l-56.5,21.2l-21.2,56.5c-1.7,4.5 -6,7.5 -10.8,7.5c-4.8,0 -9.1,-3 -10.8,-7.5l-21.2,-56.5l-56.5,-21.2c-5.4,-1.7 -7.5,-6 -7.5,-10.8c0,-4.8 2.1,-9.1 7.5,-10.8z"/></symbol></defs><g class="layer"><title>Layer 1</title><rect id="svg_6" width="378" height="81" x="12" y="10.7" fill="#fff" stroke="#fff"/><text id="svg_3" x="227" y="62.84" fill="#000" stroke="#000" stroke-width="0" font-family="Serif" font-size="40" text-anchor="middle" transform="matrix(1 0 0 1 0 0)" xml:space="preserve">react-wizardry</text><use id="svg_5" x="-42.15" y="56.2" fill="#005fbf" transform="matrix(0.454118 0 0 0.454118 1.36848 1.02041)" xlink:href="#svg_1"/></g></svg>